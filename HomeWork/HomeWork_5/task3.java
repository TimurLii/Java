package HomeWork.HomeWork_5;

public class task3 {
    public static void main(String[] args) {
        int[] arr = {1234, 4, 7, 2, 1, -3, 0, 567, 45, 90, 34, 2, 234};

        heapSort(arr);

        for (int i = 0; i < arr.length; i++)
            System.out.print(arr[i] + " ");
    }

    public static void buildTree(int[] tree, int sortLength) {
//Необходимо разработать программу для сортировки массива целых чисел с использованием сортировки кучей (Heap Sort). Программа должна работать следующим образом:
//Принимать на вход массив целых чисел для сортировки. Если массив не предоставлен, программа использует массив по умолчанию.
//Сначала выводить исходный массив на экран.
//Затем применять сортировку кучей (Heap Sort) для сортировки элементов массива в порядке возрастания.
//Выводить отсортированный массив на экран.
//Ваше решение должно содержать два основных метода: buildTree, который строит сортирующее дерево на основе массива, и heapSort, который выполняет собственно сортировку кучей.
//Программа должна быть способной сортировать массив, даже если он состоит из отрицательных чисел и имеет дубликаты.

    }


    public static void heapSort(int[] arr) {
        int n = arr.length;
        for (int i = n / 2 - 1; i >= 0; i--)
            heapify(arr, i, n);
        for (int i = n - 1; i >= 0; i--) {
            int temp = arr[i];
            arr[i] = arr[0];
            arr[0] = temp;
            heapify(arr, 0, i);
        }


    }

    private static void heapify(int[] arr, int i, int n) {
        //левый ребёнок
        int l = i * 2 + 1;

        //правый ребёнок
        int r = i * 2 + 2;

        //Инициализируем наибольший элемент как корень
        int largest = i;

        //Проверка чтоб дети не стали больше чем родители
        //Если левый дочерний элемент больше корня
        if (l < n && arr[l] > arr[largest])
            largest = l;

        //Если правый дочерний элемент больше,
        // чем самый большой элемент на данный момент
        if (r < n && arr[r] > arr[largest])
            largest = r;

        //Если, ребёнок оказался больше родителя, то делаем обмен,
        //ребёнка с родителем. Если самый большой элемент не корень
        if (i != largest) {
            int temp = arr[i];
            arr[i] = arr[largest];
            arr[largest] = temp;

            //Проверяем ещё раз чтоб дети были меньше чем родители,
            //если, вдруг у детей есть свои дети
            //Рекурсивно преобразуем в двоичную кучу затронутое поддерево
            heapify(arr, largest, n);
        }
    }
}


//    static void printArray(int arr[]) {
//
//    }

